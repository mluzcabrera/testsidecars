apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: postgress
env:
  WORKFLOW_ENV_VAR: "value from workflow env var, prop1: ${{vars.prop1}}, secret1: ${{secrets.secret1}}"
  WORKFLOW_ENV_VAR_ONCE: "value from workflow env var, secretUsedOnceWorkflow: ${{secrets.secretUsedOnceWorkflow}}"
permissions:
  scm-token-own: read
  scm-token-org: none
  id-token: none
on:
  workflow_dispatch:

jobs:
  generate:
    environment: DEV
    outputs:
      hashsum: ${{ steps.hasher.outputs.hashsum }}
    env:
      JOB_ENV_VAR: value from job env var ${{vars.prop1}} ${{secrets.secret1}} ${{secrets.job-secret}}
      JOB_ENV_VAR_ONCE: "value from job env var, secretUsedOnceJob: ${{secrets.secretUsedOnceJob}}"
    timeout-minutes: 2
    services:
      postgres:
        image: docker://postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        healthcheck:
          cmd: pg_isready -U testuser -d testdb
          timeout-seconds: 7
    steps:
      - uses: docker://postgres:13
        name: Say hello
        shell: sh
        run: |
          const { Client } = require('pg');

          const pgclient = new Client({
              host: process.env.POSTGRES_HOST,
              port: process.env.POSTGRES_PORT,
              user: 'postgres',
              password: 'postgres',
              database: 'postgres'
          });

          pgclient.connect();

          const table = 'CREATE TABLE student(id SERIAL PRIMARY KEY, firstName VARCHAR(40) NOT NULL, lastName VARCHAR(40) NOT NULL, age INT, address VARCHAR(80), email VARCHAR(40))'
          const text = 'INSERT INTO student(firstname, lastname, age, address, email) VALUES($1, $2, $3, $4, $5) RETURNING *'
          const values = ['Mona the', 'Octocat', 9, '88 Colin P Kelly Jr St, San Francisco, CA 94107, United States', 'octocat@github.com']

          pgclient.query(table, (err, res) => {
              if (err) throw err
          });

          pgclient.query(text, values, (err, res) => {
              if (err) throw err
          });

          pgclient.query('SELECT * FROM student', (err, res) => {
              if (err) throw err
              console.log(err, res.rows) // Print the data in student table
              pgclient.end()
          });
